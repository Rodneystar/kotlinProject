/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package kotlinProject

import kotlinProject.innerPackage.helperFunction
import org.springframework.boot.env.YamlPropertySourceLoader
import org.springframework.core.env.MapPropertySource
import org.springframework.core.env.PropertySource
import org.springframework.core.env.StandardEnvironment
import org.springframework.core.io.ClassPathResource
import org.springframework.core.io.support.PropertySourceFactory
import kotlin.test.assertFails
import kotlin.test.Test

import kotlin.test.assertNotNull
import kotlin.test.assertTrue

class AppTest {

    @Test fun varargs() {
        var l = listOf<String>("1", "2", "3");
        var x = l.toTypedArray()
        takesVarArgs(*x)
    }

    @Test fun testEnv() {
        var env = StandardEnvironment()
        var loader = YamlPropertySourceLoader()
        loader.load( "appYaml", ClassPathResource("application.yml"))
                .forEach{ env.propertySources.addLast(it) }
        env.propertySources
                .filterIsInstance<MapPropertySource>()
//                .filter{ isNotSystemPropertiesOrEnv(it.name) }
                .flatMap{ pSource -> pSource.propertyNames.map{simpleEntry("${pSource.name}, $it", env.getProperty(it)) }}
                .forEach{println( "${it.key} : ${it.value}")}

    }

    fun takesVarArgs(vararg args: String){
        println(args::class)
        args.forEach { println(it) }

    }
}

fun externalFunction() {
    println("we are not in a class")
}

class Empty

open class Mammal(furry: Boolean) {

    val furry = furry;

    fun aFunction(i : Int) = i*2

}

class Primate(furry: Boolean) : Mammal(furry) {

}
